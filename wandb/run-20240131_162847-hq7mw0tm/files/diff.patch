diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml
index f64271a..efbb2b8 100644
--- a/.github/workflows/ci.yaml
+++ b/.github/workflows/ci.yaml
@@ -2,7 +2,7 @@ name: ci demo
 run-name: ci demo
 on: [push]
 jobs:
-    my-first-job:
+    sample-job:
         runs-on: ubuntu-latest
         steps:
         - uses: actions/checkout@v3
diff --git a/.gitignore b/.gitignore
index ee6c03a..0c3fe91 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 higgsenv/
-notebooks/analysis.ipynb
\ No newline at end of file
+notebooks/analysis.ipynb
+.env
\ No newline at end of file
diff --git a/Procfile b/Procfile
deleted file mode 100644
index 18459f8..0000000
--- a/Procfile
+++ /dev/null
@@ -1 +0,0 @@
-web: sh setup.sh && streamlit run --server.port $PORT app.py
\ No newline at end of file
diff --git a/Train.py b/Train.py
index e69de29..21276df 100644
--- a/Train.py
+++ b/Train.py
@@ -0,0 +1,67 @@
+import wandb
+from wandb.xgboost import WandbCallback
+
+import numpy as np
+import xgboost as xgb
+
+
+# setup parameters for xgboost
+param = {
+    "objective" : "multi:softmax",
+    "eta" : 0.1,
+    "max_depth": 6,
+    "nthread" : 4,
+    "num_class" : 6
+}
+
+# start a new wandb run to track this script
+wandb.init(
+    # set the wandb project where this run will be logged
+    project="Higgs-Boson",
+    
+    # track hyperparameters and run metadata
+    config=param
+)
+
+# download data from wandb Artifacts and prep data
+# wandb.use_artifact('wandb/intro/dermatology_data:v0', type='dataset').download('.')
+# data = np.loadtxt(
+#     "./dermatology.data", delimiter=",",
+#     converters={33: lambda x: int(x == "?"), 34: lambda x: int(x) - 1},
+# )
+sz = data.shape
+
+train = data[: int(sz[0] * 0.7), :]
+test = data[int(sz[0] * 0.7) :, :]
+
+train_X = train[:, :33]
+train_Y = train[:, 34]
+
+test_X = test[:, :33]
+test_Y = test[:, 34]
+
+xg_train = xgb.DMatrix(train_X, label=train_Y)
+xg_test = xgb.DMatrix(test_X, label=test_Y)
+watchlist = [(xg_train, "train"), (xg_test, "test")]
+
+# add another config to the wandb run
+num_round = 5
+wandb.config["num_round"] = 5
+wandb.config["data_shape"] = sz
+
+# pass WandbCallback to the booster to log its configs and metrics
+bst = xgb.train(
+    param, xg_train, num_round, evals=watchlist, 
+    callbacks=[WandbCallback()]
+)
+
+# get prediction
+pred = bst.predict(xg_test)
+error_rate = np.sum(pred != test_Y) / test_Y.shape[0]
+
+# log your test metric to wandb 
+wandb.summary["Error Rate"] = error_rate
+
+# [optional] finish the wandb run, necessary in notebooks
+wandb.finish()
+      
\ No newline at end of file
